# -*- mode: sh -*-
# Version 0.1 Copyright (c) Magnus (Mem) Sandberg 2020
# Email: mem (a) datakon , se
#
# Created by Mem, 2020-05-06

# Version control of this file
LUKS_FUNCTIONS_MAJOR="1"
LUKS_FUNCTIONS_MINOR="1"

## Maybe useful functions
#info () {
#    if [ ! "x${LOGFILE}" = "x" ] ; then
#	echo $* >>${LOGFILE}
#    else
#	echo $*
#    fi
#}
#error () {
#    if [ ! "x${LOGFILE}" = "x" ] ; then
#	echo $* >>${LOGFILE}
#    fi
#    echo >2 $*
#}

# Used by luksextend.sh
valid_volume () {
    # Check if volume (file)name is valid
    local volume="$1"

    if echo $volume | grep "\.\." >/dev/null ; then
	echo "Dangerous filename including '..': $volume"
	return 10
    fi
    if echo $volume | grep "\./" >/dev/null ; then
	echo "Un-supported filename including './': $volume"
	return 10
    fi
    if echo $volume | grep "^/dev/" >/dev/null ; then
	if [ ! -b $volume ] ; then
	    echo "Device ${volume} doesn't exists or is not a block device."
	    return 1
	fi
    else
	if echo $volume | grep "/" >/dev/null ; then
	    echo "Un-supported filename including '/': $volume"
	    echo "No path under or outside $IMAGEPATH supported!"
	    return 10
	fi
	if echo $volume | grep " " >/dev/null ; then
	    echo "Un-supported filename including ' ' (space char): $volume"
	    return 10
	fi
	volume=$( echo $volume | sed -e 's/\.img$//' )
	if [ ! -f ${IMAGEPATH}/${volume}.img ] ; then
	    echo "Could not find volume ${volume}"
	    return 1
	fi
    fi
    echo $volume
    return 0
}

# Used by luksextend.sh
do_yubikey () {
    read -s -p "Enter challenge: " pph ; echo
    [ $HASH -gt 0 ] && pph=$(printf %s "$pph" | sha256sum | awk '{print $1}')
    echo "Sending challenge to YubiKey, press button if blinking."
    Resp="$( ykchalresp -${YKSLOT} "$pph" || true )"
    if [ -z "$Resp" ] ; then
	unset pph ; unset Resp
	echo "Yubikey not available, wrong config (slot ${YKSLOT}) or timed out waiting for button press."
	exit 1
    fi
    [ $CONCATENATE -gt 0 ] ; Resp=$pph$Resp
    echo "Unlock of $luksdev will take a number of seconds, standby..."
    [ $DEBUG -gt 0 ] && echo "Sleep before socat unlocks $loopdev: ${SLEEPBEFORE}."
    [ $DEBUG -gt 0 ] && echo "Sleep adter socat unlocked $loopdev: ${SLEEPAFTER}."
    R=$( (sleep ${SLEEPBEFORE}; echo "$Resp"; sleep ${SLEEPAFTER}) | socat - EXEC:"udisksctl unlock -b $luksdev",pty,setsid,ctty ) ; RC=$?
    unset pph ; unset Resp
    R=$( echo $R | sed -e 's/\r$//' ) # as socat adds trailing <CR>
    [ $DEBUG -gt 0 ] && echo "\$R: '$R'"
    if [ "$R" = "Passphrase: " ] ; then
	echo
	echo "Passphrase prompt as response from unlock."
	echo "Variable \$SLEEPAFTER probably has to be increased in $CONFIG."
	echo
	if [ $PHYSDEV -eq 0 ] ; then
	    echo "Tear down loop device."
	    udisksctl loop-delete -b $loopdev
	fi
	exit 1
    fi
}
